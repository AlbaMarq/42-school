Las funciones variádicas son funciones que pueden tomar un número variable de argumentos. 
En programación C , una función variádica agrega flexibilidad al programa. 
Toma un argumento fijo y luego se puede pasar cualquier número de argumentos. 
La función variádica consiste en al menos una variable fija y luego una elipsis (…) como último parámetro.

Sintaxis:
int function_name(data_type variable_name, ...);

Se puede acceder a los valores de los argumentos pasados ​​a través del archivo de encabezado denominado como:
#include <stdarg.h>

<stdarg.h> incluye los siguientes métodos:	

Métodos										Descripción

va_start(va_list ap, argN) 					Esto permite el acceso a los argumentos de la función variádica.
va_arg(va_list ap, tipo) 					Éste accede al siguiente argumento de la función variádica.
va_copy(va_list destino, va_list src) 		Esto hace una copia de los argumentos de la función variádica.
va_end(va_list ap) 							Esto finaliza el recorrido de los argumentos de la función variádica.

Aquí, va_list contiene la información que necesitan va_start , va_arg , va_end y va_copy.

Tienes que implementar las siguientes conversiones:
• %c Imprime un solo carácter.
• %s Imprime una string (como se define por defecto en C).
• %p El puntero void * dado como argumento se imprime en formato hexadecimal.
• %d Imprime un número decimal (base 10).
• %i Imprime un entero en base 10.
• %u Imprime un número decimal (base 10) sin signo.
• %x Imprime un número hexadecimal (base 16) en minúsculas.
• %X Imprime un número hexadecimal (base 16) en mayúsculas.
• %% para imprimir el símbolo del porcentaje.



PRINTF devuelve el numero de bytes impresos